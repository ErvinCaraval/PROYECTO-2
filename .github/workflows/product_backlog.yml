name: üöÄ Crear Backlog y Sprints del Proyecto

on:
  workflow_dispatch: # Permite ejecutar este workflow manualmente desde la pesta√±a Actions

# Define el token con permisos de escritura
permissions:
  contents: write # ‚ö†Ô∏è Se cambi√≥ a 'write' para poder crear ramas
  issues: write
  # Es necesario a√±adir permisos para 'pull-requests: write' para que pueda crear etiquetas
  pull-requests: write

jobs:
  setup-project-backlog:
    runs-on: ubuntu-latest
    steps:
      # PASO 1: Descarga el c√≥digo del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # PASO 2 (MODIFICADO): Crea el proyecto si no existe y obtiene su n√∫mero autom√°ticamente
      - name: Crear Proyecto de GitHub si no existe
        id: project_setup # Le damos un ID a este paso para usar sus resultados
        env:
          # ‚ö†Ô∏è MODIFICACI√ìN A√ëADIDA: Usa el Token de Acceso Personal para tener permisos
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          PROJECT_NAME="Product Backlog"
          # ‚ö†Ô∏è MODIFICACI√ìN A√ëADIDA: Comando corregido para buscar el proyecto
          PROJECT_NUMBER=$(gh project list --owner "@me" --format json | jq -r ".projects[] | select(.title == \"$PROJECT_NAME\") | .number")
          
          if [ -z "$PROJECT_NUMBER" ]; then
            echo "Proyecto '$PROJECT_NAME' no encontrado. Cre√°ndolo ahora..."
            # Crea el proyecto y extrae su n√∫mero de la URL resultante
            PROJECT_URL=$(gh project create --owner "@me" --title "$PROJECT_NAME")
            PROJECT_NUMBER=$(echo "$PROJECT_URL" | rev | cut -d'/' -f1 | rev)
            echo "Proyecto creado con el n√∫mero: $PROJECT_NUMBER"
          else
            echo "Proyecto '$PROJECT_NAME' ya existe con el n√∫mero: $PROJECT_NUMBER"
          fi
          # Guarda el n√∫mero del proyecto para que otros pasos puedan usarlo
          echo "PROJECT_NUMBER=$PROJECT_NUMBER" >> $GITHUB_OUTPUT

      # PASO 3: Crea las Etiquetas de Prioridad si no existen
      - name: Crear Etiquetas de Prioridad si no existen
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }} # Usamos el PAT para consistencia
        run: |
          echo "Creando etiquetas de prioridad..."
          gh label create "Prioridad: Alta" --color "D93F0B" --description "Esta tarea es cr√≠tica y bloquea otras." || echo "La etiqueta 'Prioridad: Alta' ya existe."
          gh label create "Prioridad: Media" --color "FBCA04" --description "Tarea importante pero no urgente." || echo "La etiqueta 'Prioridad: Media' ya existe."
          gh label create "Prioridad: Baja" --color "0E8A16" --description "Tarea menor o mejora deseable." || echo "La etiqueta 'Prioridad: Baja' ya existe."
      
      # PASO 4: Crea los Milestones (Sprints) solo si no existen
      - name: Crear Milestones si no existen
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }} # Usamos el PAT para consistencia
          GH_REPO: ${{ github.repository }}
        run: |
          # --- Sprint Backend ---
          MILESTONE_BE_TITLE="Sprint Backend (7-15 Octubre)"
          if gh api /repos/${GH_REPO}/milestones --paginate -q ".[] | select(.title == \"$MILESTONE_BE_TITLE\")" | grep -qF "$MILESTONE_BE_TITLE"; then
            echo "Milestone '$MILESTONE_BE_TITLE' ya existe. Omitiendo."
          else
            echo "Creando milestone '$MILESTONE_BE_TITLE'..."
            gh api --method POST -H "Accept: application/vnd.github+json" "/repos/${GH_REPO}/milestones" \
              -f title="$MILESTONE_BE_TITLE" \
              -f description='Infraestructura completa. Todas las APIs y funcionalidades de backend deben estar listas.' \
              -f due_on='2025-10-15T23:59:59Z'
          fi

          # --- Sprint Frontend ---
          MILESTONE_FE_TITLE="Sprint Frontend (16-21 Octubre)"
          if gh api /repos/${GH_REPO}/milestones --paginate -q ".[] | select(.title == \"$MILESTONE_FE_TITLE\")" | grep -qF "$MILESTONE_FE_TITLE"; then
            echo "Milestone '$MILESTONE_FE_TITLE' ya existe. Omitiendo."
          else
            echo "Creando milestone '$MILESTONE_FE_TITLE'..."
            gh api --method POST -H "Accept: application/vnd.github+json" "/repos/${GH_REPO}/milestones" \
              -f title="$MILESTONE_FE_TITLE" \
              -f description='Implementaci√≥n de UI/UX usando las APIs del backend ya terminadas.' \
              -f due_on='2025-10-21T23:59:59Z'
          fi

      # PASO 5: Crea todos los Issues, los a√±ade al proyecto y solo si no existen
      - name: Crear Issues y a√±adirlas al Proyecto
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }} # Usamos el PAT para consistencia
          PROJECT_NUMBER: ${{ steps.project_setup.outputs.PROJECT_NUMBER }}
        run: |
          # La funci√≥n ahora tambi√©n a√±ade la issue al proyecto.
          create_and_add_to_project() {
            local title="$1"
            local body="$2"
            local label="$3"
            local milestone="$4"
            
            ISSUE_URL=$(gh issue list --state all --search "in:title \"$title\"" --json url -q ".[0].url")

            if [ -n "$ISSUE_URL" ]; then
              echo "Issue '$title' ya existe. Omitiendo creaci√≥n."
            else
              echo "Creando issue '$title'..."
              ISSUE_URL=$(gh issue create --title "$title" --body "$body" --label "$label" --milestone "$milestone")
            fi

            if [ -n "$ISSUE_URL" ]; then
                echo "A√±adiendo issue $ISSUE_URL al proyecto ${{ env.PROJECT_NUMBER }}..."
                PROJECT_ID=$(gh project view ${{ env.PROJECT_NUMBER }} --owner "@me" --format json | jq -r '.id')
                CONTENT_ID=$(gh issue view $ISSUE_URL --json id | jq -r '.id')
                
                gh api graphql -f query='
                  mutation($project:ID!, $content:ID!) {
                    addProjectV2ItemById(input: {projectId: $project, contentId: $content}) {
                      item { id }
                    }
                  }' -f project="$PROJECT_ID" -f content="$CONTENT_ID" || echo "Fallo al a√±adir la issue al proyecto. Puede que ya estuviera a√±adida."
                
                  # === MOVER LA ISSUE A LA COLUMNA 'Todo' ===
                  # Obt√©n el ID de la columna 'Todo' de tu proyecto y reemplaza TODO_COLUMN_ID abajo
                  TODO_COLUMN_ID="f75ad846"
                  # Busca el ID de la tarjeta creada en el proyecto
                  CARD_ID=$(gh api graphql -f query='
                    query($project:ID!, $content:ID!) {
                      projectV2ItemById(projectId: $project, id: $content) {
                        id
                      }
                    }' -f project="$PROJECT_ID" -f content="$CONTENT_ID" | jq -r '.data.projectV2ItemById.id')

                  # Mueve la tarjeta a la columna 'Todo'
                  gh api graphql -f query='
                    mutation($card:ID!, $column:ID!) {
                      moveProjectCard(input: {cardId: $card, columnId: $column}) {
                        clientMutationId
                      }
                    }' -f card="$CARD_ID" -f column="$TODO_COLUMN_ID" || echo "No se pudo mover la issue a la columna 'Todo'. Revisa el ID."
            fi
          }

          # ===============================================
          # ==         ISSUES SPRINT BACKEND             ==
          # ===============================================

          create_and_add_to_project \
            "[BE] US1: Registro de preferencia de accesibilidad" \
            "**Como** un nuevo jugador, **Quiero** poder indicar durante el registro si tengo dificultades visuales, **Para que** el juego pueda activar autom√°ticamente las funcionalidades de accesibilidad para m√≠.
            
            ---
            ### **Puntos de Estimaci√≥n:** 3
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ El formulario de registro debe incluir un checkbox.
            - ‚úÖ El backend debe poder almacenar esta preferencia en Firebase.
            - ‚úÖ El valor por defecto debe ser \`false\`." \
            "Prioridad: Alta" "Sprint Backend (7-15 Octubre)"

          create_and_add_to_project \
            "[BE] US5: Almacenamiento del historial de interacciones de voz" \
            "**Como** usuario del modo de voz, **Quiero** que mis interacciones se almacenen, **Para que** pueda revisar mi actividad.

            ---
            ### **Puntos de Estimaci√≥n:** 6
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ El backend debe registrar cada interacci√≥n.
            - ‚úÖ Cada registro debe incluir \`userId\`, \`questionId\`, etc.
            - ‚úÖ Se debe crear un endpoint seguro para recuperar el historial." \
            "Prioridad: Media" "Sprint Backend (7-15 Octubre)"

          create_and_add_to_project \
            "[BE] US7: Configuraci√≥n administrativa de accesibilidad" \
            "**Como** administrador, **Quiero** tener un panel para configurar la accesibilidad, **Para que** pueda gestionar la funcionalidad.

            ---
            ### **Puntos de Estimaci√≥n:** 4
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ El panel debe tener una secci√≥n de Accesibilidad.
            - ‚úÖ Los admins deben poder habilitar/deshabilitar el modo de voz.
            - ‚úÖ El backend debe proveer un endpoint de estad√≠sticas." \
            "Prioridad: Baja" "Sprint Backend (7-15 Octubre)"

          create_and_add_to_project \
            "[BE] US8: Integraci√≥n del modo de voz con el juego" \
            "**Como** desarrollador, **Quiero** asegurar que el modo de voz se integre con WebSocket, **Para que** la experiencia de juego no se degrade.

            ---
            ### **Puntos de Estimaci√≥n:** 6
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ El servidor de WebSocket debe procesar eventos de voz.
            - ‚úÖ Las pruebas de estr√©s no deben mostrar degradaci√≥n." \
            "Prioridad: Alta" "Sprint Backend (7-15 Octubre)"

          create_and_add_to_project \
            "[BE] US9: Procesamiento y validaci√≥n de respuestas por voz" \
            "**Como** usuario de voz, **Quiero** que el sistema valide mis respuestas habladas, **Para que** pueda participar usando mi voz.

            ---
            ### **Puntos de Estimaci√≥n:** 4
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ Crear un endpoint \`POST /api/voice-responses/validate\`.
            - ‚úÖ El backend debe implementar la l√≥gica de validaci√≥n.
            - ‚úÖ La interacci√≥n debe registrarse en el historial." \
            "Prioridad: Alta" "Sprint Backend (7-15 Octubre)"

          # ===============================================
          # ==         ISSUES SPRINT FRONTEND            ==
          # ===============================================

          create_and_add_to_project \
            "[FE] US1: Integraci√≥n frontend de preferencia de accesibilidad" \
            "**Como** un nuevo jugador, **Quiero** ver y usar la opci√≥n de accesibilidad en el formulario de registro, **Para que** mi preferencia quede guardada desde el inicio.

            ---
            ### **Puntos de Estimaci√≥n:** 2
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ El componente de UI de registro incluye el checkbox de accesibilidad.
            - ‚úÖ Al enviar el formulario, el valor del checkbox se env√≠a a la API del backend." \
            "Prioridad: Alta" "Sprint Frontend (16-21 Octubre)"

          create_and_add_to_project \
            "[FE] US2: Activaci√≥n autom√°tica del modo de voz" \
            "**Como** un usuario con dificultades visuales, **Quiero** que el modo de voz se active autom√°ticamente, **Para que** no tenga que buscarlo manualmente.

            ---
            ### **Puntos de Estimaci√≥n:** 5
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ Al iniciar sesi√≥n, el frontend debe verificar la preferencia.
            - ‚úÖ Si es \`true\`, el modo de voz se activa.
            - ‚úÖ El usuario puede deshabilitarlo manualmente." \
            "Prioridad: Alta" "Sprint Frontend (16-21 Octubre)"

          create_and_add_to_project \
            "[FE] US3: Lectura de preguntas mediante Text-to-Speech (TTS)" \
            "**Como** usuario de voz, **Quiero** que el sistema lea las preguntas y opciones, **Para que** pueda entender el contenido sin verlo.

            ---
            ### **Puntos de Estimaci√≥n:** 8
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ El texto y opciones deben leerse con la Web Speech API.
            - ‚úÖ El usuario puede pausar y reanudar la lectura." \
            "Prioridad: Alta" "Sprint Frontend (16-21 Octubre)"

          create_and_add_to_project \
            "[FE] US4: Configuraci√≥n de ajustes de voz" \
            "**Como** usuario de voz, **Quiero** poder configurar la voz, **Para que** pueda personalizar la experiencia.

            ---
            ### **Puntos de Estimaci√≥n:** 5
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ Debe haber un panel de ajustes.
            - ‚úÖ El usuario puede cambiar voz, velocidad y volumen.
            - ‚úÖ Los ajustes deben guardarse en \`localStorage\`." \
            "Prioridad: Media" "Sprint Frontend (16-21 Octubre)"

          create_and_add_to_project \
            "[FE] US5: Integraci√≥n frontend del historial de voz" \
            "**Como** usuario de voz, **Quiero** ver mi historial de interacciones, **Para que** pueda consultar mi actividad pasada.

            ---
            ### **Puntos de Estimaci√≥n:** 3
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ Crear una nueva vista/componente para mostrar el historial.
            - ‚úÖ Consumir el endpoint \`GET /api/voice-interactions/:userId\` del backend.
            - ‚úÖ Mostrar los datos de forma clara en la UI." \
            "Prioridad: Media" "Sprint Frontend (16-21 Octubre)"

          create_and_add_to_project \
            "[FE] US6: Sistema de tutorial de audio" \
            "**Como** nuevo usuario con dificultades visuales, **Quiero** recibir un tutorial de audio, **Para que** pueda aprender a jugar sin asistencia visual.

            ---
            ### **Puntos de Estimaci√≥n:** 7
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ El tutorial se ofrece autom√°ticamente a nuevos usuarios.
            - ‚úÖ Cubre navegaci√≥n, lectura y c√≥mo responder.
            - ‚úÖ El usuario puede omitir el tutorial." \
            "Prioridad: Media" "Sprint Frontend (16-21 Octubre)"

          create_and_add_to_project \
            "[FE] US7: Panel administrativo frontend" \
            "**Como** administrador, **Quiero** ver y usar los controles de accesibilidad en el panel, **Para que** pueda gestionar la funcionalidad en la plataforma.

            ---
            ### **Puntos de Estimaci√≥n:** 2
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ La UI del panel de administraci√≥n debe tener la nueva secci√≥n de accesibilidad.
            - ‚úÖ Los controles deben consumir las APIs del backend para ver estad√≠sticas y cambiar ajustes." \
            "Prioridad: Baja" "Sprint Frontend (16-21 Octubre)"

          create_and_add_to_project \
            "[FE] US8: Integraci√≥n frontend del modo de voz" \
            "**Como** usuario de voz, **Quiero** que el modo de voz funcione correctamente durante una partida en tiempo real, **Para que** mi experiencia de juego sea fluida.

            ---
            ### **Puntos de Estimaci√≥n:** 3
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ El estado del modo de voz (activado/desactivado) debe gestionarse correctamente con los eventos de WebSocket.
            - ‚úÖ No debe haber conflictos entre la lectura de TTS y los eventos del juego." \
            "Prioridad: Alta" "Sprint Frontend (16-21 Octubre)"

          create_and_add_to_project \
            "[FE] US9: Reconocimiento de voz con Web Speech API" \
            "**Como** usuario de voz, **Quiero** responder a las preguntas con mi voz, **Para que** pueda participar sin usar el mouse.

            ---
            ### **Puntos de Estimaci√≥n:** 6
            ---
            ### **Criterios de Aceptaci√≥n:**
            - ‚úÖ Usar Web Speech API para escuchar y transcribir.
            - ‚úÖ Debe reconocer respuestas clave (\"A\", \"B\", \"C\", etc.).
            - ‚úÖ La respuesta se env√≠a al backend para validaci√≥n." \
            "Prioridad: Alta" "Sprint Frontend (16-21 Octubre)"
      
      # PASO 6: Crea y Vincula las Ramas para cada Issue
      - name: Crear Ramas y Vincularlas a las Issues
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }} # Usamos el PAT para consistencia
        run: |
          MAIN_BRANCH_SHA=$(git rev-parse main)
          gh issue list --state open --json number,title | jq -c '.[]' | while read issue; do
            ISSUE_NUMBER=$(echo $issue | jq -r '.number')
            ISSUE_TITLE=$(echo $issue | jq -r '.title')
            BRANCH_TITLE=$(echo "$ISSUE_TITLE" | iconv -t ascii//TRANSLIT | sed -E 's/\[(BE|FE)\] //g' | sed -E 's/[^a-zA-Z0--9]+/-/g' | sed -E 's/^-+\|-+$//g' | tr '[:upper:]' '[:lower:]')
            BRANCH_NAME="hu-${ISSUE_NUMBER}-${BRANCH_TITLE}"

            if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
              echo "La rama '$BRANCH_NAME' ya existe."
            else
              echo "Creando rama '$BRANCH_NAME'..."
              gh api repos/${{ github.repository }}/git/refs --method POST -f ref="refs/heads/${BRANCH_NAME}" -f sha="$MAIN_BRANCH_SHA"
              # Comenta en la issue para vincular la rama
              gh issue comment $ISSUE_NUMBER --body "Se ha creado la rama de trabajo para esta HU: \`$BRANCH_NAME\`"
            fi
          done

