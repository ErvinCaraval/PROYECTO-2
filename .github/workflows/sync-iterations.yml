name: Sync Iterations from Milestones

on:
  workflow_dispatch: {}
  milestone:
    types: [created, edited]

jobs:
  sync:
    name: Sync HU issues with milestone dates
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sync iterations (create/update issue comments)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const marker = '<!-- iteration-sync -->';

            // Fetch all open issues in the repo (pagination handled)
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner,
              repo,
              state: 'open',
            });

            // Filter HU issues: title starts with HU<number> or has label 'user-story'
            const huIssues = issues.filter(i => {
              const isHuTitle = /^HU\d+/i.test(i.title || '');
              const hasUserStoryLabel = (i.labels || []).some(l => (l.name || '').toLowerCase() === 'user-story');
              return isHuTitle || hasUserStoryLabel;
            });

            console.log(`Found ${huIssues.length} HU issues to process`);

            for (const issue of huIssues) {
              try {
                if (!issue.milestone) {
                  console.log(`Issue #${issue.number} has no milestone, skipping`);
                  continue;
                }

                const dueOn = issue.milestone.due_on; // may be null
                // Use milestone.due_on if available; otherwise fallback to today's date (YYYY-MM-DD)
                const isoDate = dueOn ? dueOn.slice(0,10) : (new Date().toISOString().slice(0,10));
                const iterationStart = isoDate;
                const iterationEnd = isoDate;

                // Build comment body
                const body = `${marker}\n**Iteration start:** ${iterationStart}\n**Iteration end:** ${iterationEnd}\n\n_Sync generated by workflow 'sync-iterations'._`;

                // List comments on the issue to find an existing sync comment
                const comments = await github.rest.issues.listComments({ owner, repo, issue_number: issue.number });
                const existing = comments.data.find(c => (c.body || '').startsWith(marker));

                if (existing) {
                  // Update existing comment
                  await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
                  console.log(`Updated iteration comment on issue #${issue.number}`);
                } else {
                  // Create a new comment
                  await github.rest.issues.createComment({ owner, repo, issue_number: issue.number, body });
                  console.log(`Created iteration comment on issue #${issue.number}`);
                }

                // Optionally add a label to indicate sync (label must exist in repo)
                try {
                  await github.rest.issues.addLabels({ owner, repo, issue_number: issue.number, labels: ['iteration-synced'] });
                } catch (err) {
                  // Non-fatal: label may not exist
                  console.log(`Could not add label to issue #${issue.number} (label may not exist): ${err.message}`);
                }

              } catch (err) {
                console.log(`Error processing issue #${issue.number}: ${err.message}`);
              }
            }

            console.log('Sync complete');
