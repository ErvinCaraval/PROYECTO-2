# GitHub Actions CI/CD Workflow para frontend-v2
# Ejecuta pruebas, builds, y despliegue para el servicio de frontend.

name: Frontend-v2 - CI/CD

on:
  workflow_call:

concurrency:
  group: frontend-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-build:
    name: Test & Deploy Frontend-v2
    runs-on: ubuntu-latest

    # Se define el directorio de trabajo por defecto para todos los comandos 'run'
    defaults:
      run:
        working-directory: frontend-v2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          # Se especifica la ruta al package-lock.json para el caché del monorepo
          cache-dependency-path: frontend-v2/package-lock.json

      # El paso manual de 'actions/cache' se elimina porque es redundante.
      # 'setup-node' con la opción 'cache' ya se encarga de esto.

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit

      - name: Build project
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Export Playwright Chromium path
        run: |
          node -e "(async()=>{const { chromium }=require('playwright'); const p=chromium.executablePath(); if(p){console.log(p)} else {console.error('no-chrome'); process.exit(1)} })()" > ../chrome-path.txt
          if [ -s ../chrome-path.txt ]; then echo "CHROME_PATH=$(cat ../chrome-path.txt)" >> $GITHUB_ENV; fi
        # Se elimina 'working-directory: .' para que se ejecute en el directorio por defecto 'frontend-v2'

      - name: Run Lighthouse (LHCI)
        env:
          CHROME_PATH: ${{ env.CHROME_PATH }}
        run: |
          npm install -g @lhci/cli@0.8 || true
          echo "Using CHROME_PATH=$CHROME_PATH"
          # LHCI necesita buscar el directorio 'dist' que está dentro de 'frontend-v2'
          npx http-server ./dist -p 8080 --silent &
          npx -y @lhci/cli@0.8 autorun --collect.url=http://localhost:8080 --upload.target=temporary-public-storage || (echo "LHCI failed - printing environment" && env)

      - name: Run Playwright E2E tests
        run: npm run test:e2e

      - name: Run visual tests
        run: npm run test:visual

      - name: Run accessibility (a11y) tests
        run: npm run test:a11y

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend-v2/playwright-report

      - name: Upload ESLint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: frontend-v2/reports/eslint.json

      - name: Auto-push generated changes
        if: success()
        run: |
          if [ "${{ secrets.ALLOW_AUTO_PUSH }}" = "true" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "chore(ci): update generated artifacts [skip ci]" || echo "No changes to commit"
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "Auto-push disabled. Set secret ALLOW_AUTO_PUSH=true to enable."
          fi

      - name: Deploy to Vercel
        if: success()
        env:
          # Enable more verbose debugging from Vercel CLI to capture server errors
          VERCEL_DEBUG: 1
        run: |
          if [ -n "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "Installing Vercel CLI..."
            # install latest CLI but avoid changing global state too much
            npm i -g vercel@latest
            echo "Vercel CLI version: $(vercel --version || true)"
            echo "Running vercel deploy (prod) with debug enabled..."
            # Use --yes instead of deprecated --confirm and pin latest with npx
            # Capture output and exit code to print debug info on failure
            set -o pipefail
            npx vercel@latest --prod --yes --token "${{ secrets.VERCEL_TOKEN }}" 2>&1 | tee vercel-deploy.log || {
              echo "Vercel deploy failed — printing last 200 lines of vercel-deploy.log"
              tail -n 200 vercel-deploy.log || true
              echo "If this is an intermittent internal server error (500) from Vercel, try re-running the workflow or contact Vercel support."
              exit 1
            }
            echo "Vercel deploy finished successfully."
          else
            echo "VERCEL_TOKEN not set - skipping deploy"
          fi

      - name: Upload Vercel deploy log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vercel-deploy-log
          path: vercel-deploy.log
