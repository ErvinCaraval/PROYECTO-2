
openapi: 3.0.0
info:
  title: BrainBlitz API - Documentación Detallada
  version: 1.0.0
  description: |
    Bienvenido a la API de BrainBlitz, el backend para el juego de trivia multijugador.  
    Aquí encontrarás todos los endpoints REST disponibles, sus parámetros, ejemplos de uso y descripciones claras para que puedas integrarte fácilmente, incluso si es tu primera vez trabajando con APIs.

    **Notas importantes:**
    - Todas las respuestas son en formato JSON.
    - Algunos endpoints requieren autenticación mediante Firebase (token JWT).
    - Puedes probar todos los endpoints desde `/api-docs` en el servidor en ejecución.

    ---
    ## Uso en la nube (Render)
    - **Base URL:** `https://brainblitz-backend.onrender.com`
    - Reemplaza `localhost:5000` por el URL de Render en todas tus peticiones.
    - Prueba los endpoints en [https://brainblitz-backend.onrender.com/api-docs](https://brainblitz-backend.onrender.com/api-docs)
    - Ejemplo:
      ```bash
      curl -X POST https://brainblitz-backend.onrender.com/api/users/register \
        -H "Content-Type: application/json" \
        -d '{"email":"test@correo.com","password":"123456","displayName":"Test"}'
      ```

servers:
  - url: https://proyecto-2-olvb.onrender.com
    description: Entorno de producción
  - url: http://localhost:5000
    description: Entorno local

tags:
  - name: Users
    description: Registro, autenticación y estadísticas de usuario.
  - name: Games
    description: Gestión de partidas multijugador.
  - name: Questions
    description: Gestión y consulta de preguntas de trivia.
  - name: AI
    description: Generación de preguntas con inteligencia artificial.
  - name: VoiceInteractions
    description: Gestión de interacciones de voz y modo de accesibilidad.
  - name: VoiceResponses
    description: Procesamiento y validación de respuestas por voz.
  - name: AdminAccessibility
    description: Controles administrativos para funcionalidades de accesibilidad.

paths:

  /api/admin/accessibility:
    get:
      tags: [AdminAccessibility]
      summary: Obtener configuración de accesibilidad del usuario autenticado
      description: |
        Devuelve la configuración de accesibilidad del usuario autenticado.
        **Requiere autenticación Firebase.**
        
        ### Ejemplo de uso
        **Local:**
        ```bash
        curl -X GET http://localhost:5000/api/admin/accessibility -H "Authorization: Bearer <TOKEN>"
        ```
        **Producción:**
        ```bash
        curl -X GET https://proyecto-2-olvb.onrender.com/api/admin/accessibility -H "Authorization: Bearer <TOKEN>"
        ```
      security:
        - bearerAuth: []
      responses:
        200:
          description: Configuración de accesibilidad del usuario.
          content:
            application/json:
              schema:
                type: object
                properties:
                  visualDifficulty:
                    type: boolean
                    example: false
                  stats:
                    type: object
                  email:
                    type: string
                    example: "usuario@ejemplo.com"
                  displayName:
                    type: string
                    example: "Usuario Ejemplo"
              example:
                visualDifficulty: false
                stats: { gamesPlayed: 10, wins: 2, correctAnswers: 30 }
                email: "usuario@ejemplo.com"
                displayName: "Usuario Ejemplo"
        401:
          description: No autenticado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No autenticado"
        404:
          description: Usuario no encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Usuario no encontrado"
        500:
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error interno del servidor"

    put:
      tags: [AdminAccessibility]
      summary: Actualizar configuración de accesibilidad del usuario autenticado
      description: |
        Actualiza la preferencia de accesibilidad visual del usuario autenticado.
        **Requiere autenticación Firebase.**
        
        ### Ejemplo de uso
        **Local:**
        ```bash
        curl -X PUT http://localhost:5000/api/admin/accessibility \
          -H "Authorization: Bearer <TOKEN>" \
          -H "Content-Type: application/json" \
          -d '{"visualDifficulty": true}'
        ```
        **Producción:**
        ```bash
        curl -X PUT https://proyecto-2-olvb.onrender.com/api/admin/accessibility \
          -H "Authorization: Bearer <TOKEN>" \
          -H "Content-Type: application/json" \
          -d '{"visualDifficulty": true}'
        ```
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                visualDifficulty:
                  type: boolean
                  description: "Indica si el usuario tiene dificultades visuales."
                  example: true
            example:
              visualDifficulty: true
      responses:
        200:
          description: Configuración actualizada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  visualDifficulty:
                    type: boolean
                    example: true
                  email:
                    type: string
                    example: "usuario@ejemplo.com"
                  displayName:
                    type: string
                    example: "Usuario Ejemplo"
              example:
                visualDifficulty: true
                email: "usuario@ejemplo.com"
                displayName: "Usuario Ejemplo"
        400:
          description: visualDifficulty debe ser booleano.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "visualDifficulty debe ser booleano"
        401:
          description: No autenticado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No autenticado"
        500:
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error interno del servidor"

  /api/admin/accessibility/stats:
    get:
      tags: [AdminAccessibility]
      summary: Obtener estadísticas de accesibilidad del usuario autenticado
      description: |
        Devuelve estadísticas de interacciones de voz del usuario autenticado.
        **Requiere autenticación Firebase.**
        
        ### Ejemplo de uso
        **Local:**
        ```bash
        curl -X GET http://localhost:5000/api/admin/accessibility/stats -H "Authorization: Bearer <TOKEN>"
        ```
        **Producción:**
        ```bash
        curl -X GET https://proyecto-2-olvb.onrender.com/api/admin/accessibility/stats -H "Authorization: Bearer <TOKEN>"
        ```
      security:
        - bearerAuth: []
      responses:
        200:
          description: Estadísticas de accesibilidad del usuario.
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalInteractions:
                    type: integer
                    example: 12
                  averageDuration:
                    type: number
                    example: 2.5
              example:
                totalInteractions: 12
                averageDuration: 2.5
        401:
          description: No autenticado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No autenticado"
        500:
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error interno del servidor"

  /api/admin/accessibility-stats:
    get:
      tags: [AdminAccessibility]
      summary: Obtener estadísticas globales de accesibilidad (ADMIN)
      description: |
        Devuelve estadísticas globales de accesibilidad y uso del modo de voz.
        **Requiere autenticación Firebase.**
        
        ### Ejemplo de uso
        **Local:**
        ```bash
        curl -X GET http://localhost:5000/api/admin/accessibility-stats -H "Authorization: Bearer <TOKEN>"
        ```
        **Producción:**
        ```bash
        curl -X GET https://proyecto-2-olvb.onrender.com/api/admin/accessibility-stats -H "Authorization: Bearer <TOKEN>"
        ```
      security:
        - bearerAuth: []
      responses:
        200:
          description: Estadísticas globales de accesibilidad.
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                    example: 100
                  usersWithVisualDifficulty:
                    type: integer
                    example: 20
                  voiceModeUsers:
                    type: integer
                    example: 20
                  adoptionRate:
                    type: number
                    example: 20.0
                  totalVoiceInteractions:
                    type: integer
                    example: 300
                  avgVoiceDuration:
                    type: number
                    example: 2.7
                  voiceAnswerCount:
                    type: integer
                    example: 180
                  questionReadCount:
                    type: integer
                    example: 120
                  lastUpdated:
                    type: string
                    example: "2025-10-14T12:00:00.000Z"
              example:
                totalUsers: 100
                usersWithVisualDifficulty: 20
                voiceModeUsers: 20
                adoptionRate: 20.0
                totalVoiceInteractions: 300
                avgVoiceDuration: 2.7
                voiceAnswerCount: 180
                questionReadCount: 120
                lastUpdated: "2025-10-14T12:00:00.000Z"
        401:
          description: No autenticado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No autenticado"
        500:
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error interno del servidor"

  /api/admin/voice-mode-users:
    get:
      tags: [AdminAccessibility]
      summary: Obtener lista de usuarios con modo de voz (ADMIN)
      description: |
        Devuelve la lista de usuarios que tienen activada la preferencia de accesibilidad visual.
        **Requiere autenticación Firebase.**
        
        ### Ejemplo de uso
        **Local:**
        ```bash
        curl -X GET http://localhost:5000/api/admin/voice-mode-users -H "Authorization: Bearer <TOKEN>"
        ```
        **Producción:**
        ```bash
        curl -X GET https://proyecto-2-olvb.onrender.com/api/admin/voice-mode-users -H "Authorization: Bearer <TOKEN>"
        ```
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de usuarios con modo de voz.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 3
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        uid:
                          type: string
                          example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
                        email:
                          type: string
                          example: "usuario@ejemplo.com"
                        displayName:
                          type: string
                          example: "Usuario Ejemplo"
                        visualDifficulty:
                          type: boolean
                          example: true
                        createdAt:
                          type: string
                          example: "2025-10-01T10:00:00.000Z"
                        lastLogin:
                          type: string
                          example: "2025-10-14T09:00:00.000Z"
              example:
                total: 2
                users:
                  - uid: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
                    email: "usuario1@ejemplo.com"
                    displayName: "Usuario Uno"
                    visualDifficulty: true
                    createdAt: "2025-10-01T10:00:00.000Z"
                    lastLogin: "2025-10-14T09:00:00.000Z"
                  - uid: "u1a2b3c4d5e6f7g8h9i0j1k2l3"
                    email: "usuario2@ejemplo.com"
                    displayName: "Usuario Dos"
                    visualDifficulty: true
                    createdAt: "2025-10-02T11:00:00.000Z"
                    lastLogin: "2025-10-14T08:00:00.000Z"
        401:
          description: No autenticado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No autenticado"
        500:
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error interno del servidor"

  /api/voice-interactions:
    post:
      tags: [VoiceInteractions]
      summary: Registrar una nueva interacción de voz
      description: |
        Registra una interacción de voz (lectura o respuesta) del usuario.
        **Integración completa con AssemblyAI para Speech-to-Text (STT).**
        Si se proporciona audioBase64 en metadata, se procesará automáticamente con AssemblyAI.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId, questionId, action, duration, timestamp, metadata]
              properties:
                userId:
                  type: string
                  example: "abc123"
                questionId:
                  type: string
                  example: "q789"
                action:
                  type: string
                  enum: [question_read, voice_answer]
                  example: "voice_answer"
                duration:
                  type: number
                  example: 3.2
                timestamp:
                  type: string
                  format: date-time
                  example: "2025-10-10T12:34:56.789Z"
                voiceText:
                  type: string
                  nullable: true
                  example: null
                confidence:
                  type: number
                  nullable: true
                  example: null
                metadata:
                  type: object
                  example: { "audioBase64": "..." }
            example:
              userId: "abc123"
              questionId: "q789"
              action: "voice_answer"
              duration: 3.2
              timestamp: "2025-10-10T12:34:56.789Z"
              voiceText: null
              confidence: null
              metadata:
                audioBase64: "..."
      responses:
        201:
          description: Interacción registrada correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Voice interaction registered successfully."
        400:
          description: Error en los datos enviados.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required fields."
        500:
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

  /api/voice-interactions/{userId}:
    get:
      tags: [VoiceInteractions]
      summary: Obtener historial de interacciones de voz de un usuario
      description: Devuelve el historial completo de interacciones de voz para el usuario indicado.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Historial de interacciones de voz.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    userId:
                      type: string
                    questionId:
                      type: string
                    action:
                      type: string
                    duration:
                      type: number
                    timestamp:
                      type: string
                    voiceText:
                      type: string
                      nullable: true
                    confidence:
                      type: number
                      nullable: true
                    metadata:
                      type: object
              example:
                - id: "docId1"
                  userId: "abc123"
                  questionId: "q789"
                  action: "voice_answer"
                  duration: 3.2
                  timestamp: "2025-10-10T12:34:56.789Z"
                  voiceText: null
                  confidence: null
                  metadata:
                    audioBase64: "..."
        500:
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

    delete:
      tags: [VoiceInteractions]
      summary: Eliminar historial de interacciones de voz de un usuario
      description: Elimina todas las interacciones de voz del usuario indicado.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Historial eliminado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Deleted 3 interactions."
        500:
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

  /api/voice-interactions/stats/{userId}:
    get:
      tags: [VoiceInteractions]
      summary: Obtener estadísticas básicas de interacciones de voz
      description: Devuelve estadísticas básicas (total, duración promedio) de las interacciones de voz del usuario.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Estadísticas de interacciones de voz.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 5
                  averageDuration:
                    type: number
                    example: 2.8
        500:
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

  /api/voice-interactions/process-audio:
    post:
      tags: [VoiceInteractions]
      summary: Procesar audio directamente con AssemblyAI
      description: |
        Procesa un archivo de audio en base64 usando AssemblyAI para obtener transcripción y validación.
        **Integración completa con AssemblyAI para Speech-to-Text (STT).**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [audioBase64]
              properties:
                audioBase64:
                  type: string
                  description: Audio en formato base64 (máximo 2MB)
                  example: "UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBz2J0fPZgjMGHm7A7+OZURE="
                questionOptions:
                  type: array
                  items:
                    type: string
                  description: Opciones de la pregunta para validación (opcional)
                  example: ["Opción A", "Opción B", "Opción C", "Opción D"]
      responses:
        200:
          description: Audio procesado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  text:
                    type: string
                    example: "primera opción"
                  confidence:
                    type: number
                    example: 0.95
                  duration:
                    type: number
                    example: 2.5
                  language:
                    type: string
                    example: "es"
                  validation:
                    type: object
                    properties:
                      isValid:
                        type: boolean
                        example: true
                      matchedOption:
                        type: string
                        example: "Opción A"
                      answerIndex:
                        type: integer
                        example: 0
                      confidence:
                        type: number
                        example: 0.9
                  suggestions:
                    type: array
                    items:
                      type: string
                    example: []
        400:
          description: Datos de entrada inválidos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid or missing audioBase64."
        413:
          description: Audio demasiado grande.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Audio demasiado grande."
        500:
          description: Error en el procesamiento de audio.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Transcription failed"
                  details:
                    type: string
                    example: "API rate limit exceeded"
                  suggestions:
                    type: array
                    items:
                      type: string
                    example: ["Diga 'A' para Opción A...", "Diga 'primera opción'"]

  /api/voice-interactions/assemblyai/status:
    get:
      tags: [VoiceInteractions]
      summary: Verificar estado de AssemblyAI
      description: Verifica el estado y disponibilidad del servicio AssemblyAI.
      responses:
        200:
          description: Estado de AssemblyAI obtenido exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: string
                    example: "API is working"
                  data:
                    type: object
                    description: Datos adicionales del estado de la API
        500:
          description: Error al verificar el estado de AssemblyAI.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "API key invalid"

  /api/users/register:
    post:
      tags: [Users]
      summary: Registrar un nuevo usuario
      description: |
        Crea un nuevo usuario en el sistema.  
        **Nota:** El registro también crea el usuario en Firebase Auth y en la base de datos de usuarios.
        **Rate Limiting:** Máximo 5 intentos de registro por IP cada 15 minutos.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, displayName]
              properties:
                email:
                  type: string
                  example: "maria.garcia@gmail.com"
                  description: "Correo electrónico único del usuario. Ejemplo real: maria.garcia@gmail.com"
                password:
                  type: string
                  example: "MiClaveSegura2025!"
                  description: "Contraseña segura (mínimo 8 caracteres, mayúsculas, minúsculas y símbolos)."
                displayName:
                  type: string
                  example: "Maria Garcia"
                  description: "Nombre visible del usuario en el juego."
                visualDifficulty:
                  type: boolean
                  example: false
                  description: "Indica si el usuario tiene dificultades visuales para activar funcionalidades de accesibilidad. Por defecto: false"
            example:
              email: "maria.garcia@gmail.com"
              password: "MiClaveSegura2025!"
              displayName: "Maria Garcia"
              visualDifficulty: false
      responses:
        201:
          description: Usuario registrado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string
                    example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
                    description: "UID generado por Firebase Auth. Ejemplo real: u7d8f9g0h1i2j3k4l5m6n7o8p9"
                  email:
                    type: string
                    example: "maria.garcia@gmail.com"
                  displayName:
                    type: string
                    example: "Maria Garcia"
                  visualDifficulty:
                    type: boolean
                    example: false
                    description: "Preferencia de accesibilidad del usuario"
              example:
                uid: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
                email: "maria.garcia@gmail.com"
                displayName: "Maria Garcia"
                visualDifficulty: false
        400:
          description: Error en el registro (por ejemplo, email ya registrado).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "El email ya está en uso."
              example:
                error: "El email ya está en uso."
        429:
          description: Demasiados intentos de registro.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Demasiados intentos de registro. Intenta de nuevo en 15 minutos."
              example:
                error: "Demasiados intentos de registro. Intenta de nuevo en 15 minutos."

  /api/users/me/profile:
    put:
      tags: [Users]
      summary: Actualizar perfil de usuario
      description: |
        Actualiza el perfil del usuario autenticado, incluyendo preferencias de accesibilidad.
        **Requiere:** Token de autenticación Firebase en el header Authorization.
        **Rate Limiting:** Máximo 10 actualizaciones por IP cada 5 minutos.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  example: "Maria Garcia Actualizada"
                  description: "Nuevo nombre visible del usuario en el juego."
                visualDifficulty:
                  type: boolean
                  example: true
                  description: "Actualizar preferencia de accesibilidad visual."
            example:
              displayName: "Maria Garcia Actualizada"
              visualDifficulty: true
      responses:
        200:
          description: Perfil actualizado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string
                    example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
                  displayName:
                    type: string
                    example: "Maria Garcia Actualizada"
                  email:
                    type: string
                    example: "maria.garcia@gmail.com"
                  visualDifficulty:
                    type: boolean
                    example: true
                  stats:
                    type: object
                    properties:
                      gamesPlayed:
                        type: integer
                        example: 12
                      wins:
                        type: integer
                        example: 4
                      correctAnswers:
                        type: integer
                        example: 87
              example:
                uid: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
                displayName: "Maria Garcia Actualizada"
                email: "maria.garcia@gmail.com"
                visualDifficulty: true
                stats:
                  gamesPlayed: 12
                  wins: 4
                  correctAnswers: 87
        400:
          description: Error en la actualización (campos inválidos).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "visualDifficulty must be a boolean value"
              example:
                error: "visualDifficulty must be a boolean value"
        401:
          description: Token de autenticación requerido.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Authentication required"
              example:
                error: "Authentication required"
        404:
          description: Usuario no encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
              example:
                error: "User not found"

  /api/users/login:
    post:
      tags: [Users]
      summary: Login de usuario (Referencia)
      description: |
        Este endpoint es solo de referencia.  
        El login real se realiza en el frontend usando Firebase Auth.
      responses:
        501:
          description: Login manejado en el cliente.

  /api/users/recover-password:
    post:
      tags: [Users]
      summary: Recuperar contraseña
      description: |
        Envía un correo de recuperación de contraseña al usuario.
        **Rate Limiting:** Máximo 3 intentos de recuperación por IP cada 15 minutos.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  example: "maria.garcia@gmail.com"
            example:
              email: "maria.garcia@gmail.com"
      responses:
        200:
          description: Email de recuperación enviado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Se ha enviado un correo de recuperación a maria.garcia@gmail.com."
              example:
                message: "Se ha enviado un correo de recuperación a maria.garcia@gmail.com."
        400:
          description: Error al enviar email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No se pudo enviar el correo."
              example:
                error: "No se pudo enviar el correo."

  /api/users/me/stats:
    get:
      tags: [Users]
      summary: Obtener estadísticas del usuario
      description: |
        Devuelve las estadísticas del usuario autenticado.  
        **Requiere:** UID del usuario como parámetro de consulta.
      parameters:
        - in: query
          name: uid
          schema:
            type: string
          required: true
          description: UID del usuario (lo obtienes tras el login).
          example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
      responses:
        200:
          description: Estadísticas del usuario encontradas.
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string
                    example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
                  stats:
                    type: object
                    properties:
                      gamesPlayed:
                        type: integer
                        example: 12
                        description: "Número total de partidas jugadas por el usuario."
                      wins:
                        type: integer
                        example: 4
                        description: "Partidas ganadas por el usuario."
                      correctAnswers:
                        type: integer
                        example: 87
                        description: "Total de respuestas correctas."
                  visualDifficulty:
                    type: boolean
                    example: false
                    description: "Preferencia de accesibilidad del usuario"
              example:
                uid: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
                stats:
                  gamesPlayed: 12
                  wins: 4
                  correctAnswers: 87
                visualDifficulty: false
        404:
          description: Usuario no encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
              example:
                error: "User not found"

  /api/users/me/history:
    get:
      tags: [Users]
      summary: (Deshabilitado) Historial de partidas
      description: |
        Este endpoint está deshabilitado y siempre devuelve un array vacío.
      responses:
        200:
          description: Historial vacío.
          content:
            application/json:
              schema:
                type: array
                items: {}
              example: []

  /api/games:
    get:
      tags: [Games]
      summary: Listar partidas públicas disponibles
      description: |
        Devuelve todas las partidas públicas que están esperando jugadores.
      responses:
        200:
          description: Lista de partidas públicas.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "game_20250918_001"
                      description: "ID único de la partida. Ejemplo real: game_20250918_001"
                    isPublic:
                      type: boolean
                      example: true
                      description: "Si la partida es pública (cualquiera puede unirse)."
                    status:
                      type: string
                      example: "waiting"
                      description: "Estado de la partida (waiting, started, finished)."
                    players:
                      type: array
                      items:
                        type: object
                        properties:
                          uid:
                            type: string
                            example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
                          displayName:
                            type: string
                            example: "Maria Garcia"
                      description: "Lista de jugadores en la partida."
                    topic:
                      type: string
                      example: "Cultura General"
                      description: "Tema principal de la partida."
                    questions:
                      type: array
                      items:
                        $ref: '#/components/schemas/Question'
                      description: "Preguntas asignadas a la partida."
              example:
                - id: "game_20250918_001"
                  isPublic: true
                  status: "waiting"
                  players:
                    - uid: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
                      displayName: "Maria Garcia"
                    - uid: "u1a2b3c4d5e6f7g8h9i0j1k2l3"
                      displayName: "Carlos Perez"
                  topic: "Cultura General"
                  questions:
                    - text: "¿Cuál es el río más largo del mundo?"
                      options: ["Nilo", "Amazonas", "Yangtsé", "Misisipi"]
                      correctAnswerIndex: 1
                      category: "Geografía"
                      difficulty: "medium"
                      explanation: "El río Amazonas es el más largo del mundo, superando al Nilo en longitud total."

  /api/questions:
    get:
      tags: [Questions]
      summary: Obtener todas las preguntas
      description: |
        Devuelve todas las preguntas almacenadas en la base de datos.
      responses:
        200:
          description: Lista de preguntas.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
              example:
                - text: "¿Cuál es el río más largo del mundo?"
                  options: ["Nilo", "Amazonas", "Yangtsé", "Misisipi"]
                  correctAnswerIndex: 1
                  category: "Geografía"
                  difficulty: "medium"
                  explanation: "El río Amazonas es el más largo del mundo, superando al Nilo en longitud total."
                - text: "¿Quién escribió 'Cien años de soledad'?"
                  options: ["Mario Vargas Llosa", "Gabriel García Márquez", "Julio Cortázar", "Isabel Allende"]
                  correctAnswerIndex: 1
                  category: "Literatura"
                  difficulty: "easy"
                  explanation: "Gabriel García Márquez es el autor de 'Cien años de soledad'."

    post:
      tags: [Questions]
      summary: Crear una nueva pregunta
      description: |
        Crea una pregunta manualmente.  
        **Ejemplo de cuerpo:**
        ```
        {
          "text": "¿Cuál es la capital de Francia?",
          "options": ["Madrid", "París", "Roma", "Berlín"],
          "correctAnswerIndex": 1,
          "category": "Geografía",
          "difficulty": "easy",
          "explanation": "París es la capital de Francia."
        }
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
            example:
              text: "¿Quién escribió 'Cien años de soledad'?"
              options: ["Mario Vargas Llosa", "Gabriel García Márquez", "Julio Cortázar", "Isabel Allende"]
              correctAnswerIndex: 1
              category: "Literatura"
              difficulty: "easy"
              explanation: "Gabriel García Márquez es el autor de 'Cien años de soledad'."
      responses:
        201:
          description: Pregunta creada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "question123"
              example:
                id: "question123"
        400:
          description: Error al crear pregunta.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Faltan campos obligatorios."
              example:
                error: "Faltan campos obligatorios."

  /api/questions/bulk:
    post:
      tags: [Questions]
      summary: Crear varias preguntas en lote
      description: |
        Permite crear varias preguntas a la vez (por ejemplo, tras generar con IA).
        **Ejemplo de cuerpo:**
        ```
        {
          "questions": [
            {
              "text": "¿Cuál es la capital de Francia?",
              "options": ["Madrid", "París", "Roma", "Berlín"],
              "correctAnswerIndex": 1,
              "category": "Geografía",
              "difficulty": "easy",
              "explanation": "París es la capital de Francia."
            },
            {
              "text": "¿Quién pintó la Mona Lisa?",
              "options": ["Van Gogh", "Picasso", "Da Vinci", "Rembrandt"],
              "correctAnswerIndex": 2,
              "category": "Arte",
              "difficulty": "medium",
              "explanation": "Leonardo da Vinci pintó la Mona Lisa."
            }
          ]
        }
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                questions:
                  type: array
                  items:
                    $ref: '#/components/schemas/Question'
            example:
              questions:
                - text: "¿Cuál es el río más largo del mundo?"
                  options: ["Nilo", "Amazonas", "Yangtsé", "Misisipi"]
                  correctAnswerIndex: 1
                  category: "Geografía"
                  difficulty: "medium"
                  explanation: "El río Amazonas es el más largo del mundo, superando al Nilo en longitud total."
                - text: "¿Quién escribió 'Cien años de soledad'?"
                  options: ["Mario Vargas Llosa", "Gabriel García Márquez", "Julio Cortázar", "Isabel Allende"]
                  correctAnswerIndex: 1
                  category: "Literatura"
                  difficulty: "easy"
                  explanation: "Gabriel García Márquez es el autor de 'Cien años de soledad'."
      responses:
        200:
          description: Preguntas creadas exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
              example:
                success: true
        400:
          description: Error al crear preguntas.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No questions provided"
              example:
                error: "No questions provided"

  /api/questions/{id}:
    put:
      tags: [Questions]
      summary: Actualizar una pregunta existente
      description: |
        Actualiza una pregunta por su ID.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID de la pregunta a actualizar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
            example:
              text: "¿Quién escribió 'Cien años de soledad'?"
              options: ["Mario Vargas Llosa", "Gabriel García Márquez", "Julio Cortázar", "Isabel Allende"]
              correctAnswerIndex: 1
              category: "Literatura"
              difficulty: "easy"
              explanation: "Gabriel García Márquez es el autor de 'Cien años de soledad'."
      responses:
        200:
          description: Pregunta actualizada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Question updated"
              example:
                message: "Question updated"
        400:
          description: Error al actualizar pregunta.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Pregunta no encontrada."
              example:
                error: "Pregunta no encontrada."

    delete:
      tags: [Questions]
      summary: Eliminar una pregunta
      description: |
        Elimina una pregunta por su ID.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID de la pregunta a eliminar.
      responses:
        200:
          description: Pregunta eliminada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Question deleted"
              example:
                message: "Question deleted"
        400:
          description: Error al eliminar pregunta.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Pregunta no encontrada."
              example:
                error: "Pregunta no encontrada."

  /api/ai/generate-questions:
    post:
      tags: [AI]
      summary: Generar preguntas con IA
      description: |
        Genera preguntas de trivia usando inteligencia artificial (Groq/OpenAI).  
        **Requiere:** API Key configurada en el backend.
        **Ejemplo de cuerpo:**
        ```
        {
          "topic": "Ciencia",
          "difficulty": "medium",
          "count": 3,
          "useAI": true
        }
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [topic, difficulty, count, useAI]
              properties:
                topic:
                  type: string
                  example: "Ciencia"
                difficulty:
                  type: string
                  example: "medium"
                count:
                  type: integer
                  example: 3
                useAI:
                  type: boolean
                  example: true
            example:
              topic: "Ciencia"
              difficulty: "medium"
              count: 3
              useAI: true
      responses:
        200:
          description: Preguntas generadas exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  topic:
                    type: string
                    example: "Ciencia"
                  difficulty:
                    type: string
                    example: "medium"
                  count:
                    type: integer
                    example: 3
                  questions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
              example:
                success: true
                topic: "Ciencia"
                difficulty: "medium"
                count: 3
                questions:
                  - text: "¿Cuál es el elemento químico con símbolo 'O'?"
                    options: ["Oro", "Oxígeno", "Osmio", "Oxalato"]
                    correctAnswerIndex: 1
                    category: "Ciencia"
                    difficulty: "easy"
                    explanation: "El símbolo 'O' corresponde al Oxígeno."
                  - text: "¿Quién propuso la teoría de la relatividad?"
                    options: ["Isaac Newton", "Albert Einstein", "Marie Curie", "Niels Bohr"]
                    correctAnswerIndex: 1
                    category: "Ciencia"
                    difficulty: "medium"
                    explanation: "Albert Einstein propuso la teoría de la relatividad."
        400:
          description: Error en la generación de preguntas.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Debes activar el modo IA para generar preguntas."
              example:
                error: "Debes activar el modo IA para generar preguntas."

  /api/ai/topics:
    get:
      tags: [AI]
      summary: Obtener lista de temas disponibles para preguntas IA
      description: |
        Devuelve una lista de temas que puedes usar para generar preguntas con IA.
      responses:
        200:
          description: Lista de temas.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  topics:
                    type: array
                    items:
                      type: string
                    example: ["Ciencia", "Historia", "Geografía"]
              example:
                success: true
                topics: ["Ciencia", "Historia", "Geografía", "Arte", "Deportes"]

  /api/ai/difficulty-levels:
    get:
      tags: [AI]
      summary: Obtener niveles de dificultad disponibles
      description: |
        Devuelve los niveles de dificultad soportados por la IA.
      responses:
        200:
          description: Lista de niveles de dificultad.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  levels:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          example: "easy"
                        label:
                          type: string
                          example: "Fácil"
              example:
                success: true
                levels:
                  - value: "easy"
                    label: "Fácil"
                  - value: "medium"
                    label: "Intermedio"
                  - value: "hard"
                    label: "Difícil"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Token JWT de Firebase Auth"
  schemas:
    Question:
      type: object
      required: [text, options, correctAnswerIndex, category, difficulty, explanation]
      properties:
        text:
          type: string
          description: "Texto de la pregunta. Ejemplo real: ¿Cuál es el río más largo del mundo?"
          example: "¿Cuál es el río más largo del mundo?"
        options:
          type: array
          description: "Opciones de respuesta. Ejemplo real: [Nilo, Amazonas, Yangtsé, Misisipi]"
          items:
            type: string
          example: ["Nilo", "Amazonas", "Yangtsé", "Misisipi"]
        correctAnswerIndex:
          type: integer
          description: "Índice de la opción correcta (en el ejemplo, Amazonas)."
          example: 1
        category:
          type: string
          description: "Categoría o tema de la pregunta. Ejemplo real: Geografía"
          example: "Geografía"
        difficulty:
          type: string
          description: "Dificultad de la pregunta (easy, medium, hard). Ejemplo real: medium"
          example: "medium"
        explanation:
          type: string
          description: "Explicación de la respuesta correcta. Ejemplo real: El río Amazonas es el más largo del mundo, superando al Nilo en longitud total."
          example: "El río Amazonas es el más largo del mundo, superando al Nilo en longitud total."
        createdBy:
          type: string
          description: "UID del creador de la pregunta. Ejemplo real: u7d8f9g0h1i2j3k4l5m6n7o8p9"
          example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
        createdAt:
          type: integer
          description: "Timestamp de creación en milisegundos. Ejemplo real: 1758172800000 (18 septiembre 2025)"
          example: 1758172800000

    # ===========================================
    # SCHEMAS DE VOZ Y ACCESIBILIDAD (HU8)
    # ===========================================
    VoiceAnswerEvent:
      type: object
      description: "Evento WebSocket para respuesta de voz"
      properties:
        gameId:
          type: string
          description: "ID del juego"
          example: "123456"
        uid:
          type: string
          description: "ID del usuario"
          example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
        voiceResponse:
          type: string
          description: "Respuesta de voz"
          example: "primera opción"
        questionOptions:
          type: array
          items:
            type: string
          description: "Opciones de la pregunta"
          example: ["Opción A", "Opción B", "Opción C", "Opción D"]

    VoiceModeToggleEvent:
      type: object
      description: "Evento WebSocket para activar/desactivar modo de voz"
      properties:
        gameId:
          type: string
          description: "ID del juego"
          example: "123456"
        uid:
          type: string
          description: "ID del usuario"
          example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
        voiceModeEnabled:
          type: boolean
          description: "Estado del modo de voz"
          example: true

    VoiceAnswerReceivedEvent:
      type: object
      description: "Evento WebSocket cuando se recibe una respuesta de voz"
      properties:
        uid:
          type: string
          description: "ID del usuario"
          example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
        confidence:
          type: number
          description: "Confianza del reconocimiento"
          example: 0.9
        matchedOption:
          type: string
          description: "Opción reconocida"
          example: "Opción A"

    VoiceModeChangedEvent:
      type: object
      description: "Evento WebSocket cuando cambia el modo de voz de un jugador"
      properties:
        uid:
          type: string
          description: "ID del usuario"
          example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
        voiceModeEnabled:
          type: boolean
          description: "Nuevo estado del modo de voz"
          example: true
        players:
          type: array
          items:
            type: object
            properties:
              uid:
                type: string
                example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
              displayName:
                type: string
                example: "Usuario Test"
              voiceModeEnabled:
                type: boolean
                example: true
          description: "Lista actualizada de jugadores con sus estados de modo de voz"

    VoiceModeStatusEvent:
      type: object
      description: "Evento WebSocket con el estado del modo de voz de todos los jugadores"
      properties:
        players:
          type: array
          items:
            type: object
            properties:
              uid:
                type: string
                example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
              displayName:
                type: string
                example: "Usuario Test"
              voiceModeEnabled:
                type: boolean
                example: true
          description: "Lista de jugadores con sus estados de modo de voz"

  # ===========================================
  # ENDPOINTS DE VOZ Y ACCESIBILIDAD (HU8)
  # ===========================================

  /api/voice-responses/validate:
    post:
      tags: [VoiceResponses]
      summary: Validar respuesta de voz
      description: |
        Valida una respuesta de voz contra las opciones de una pregunta.
        Utiliza algoritmos de coincidencia inteligente para reconocer respuestas habladas.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId, questionId, voiceResponse, questionOptions]
              properties:
                userId:
                  type: string
                  description: "ID del usuario que respondió"
                  example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
                questionId:
                  type: string
                  description: "ID de la pregunta"
                  example: "q123456"
                voiceResponse:
                  type: string
                  description: "Texto reconocido de la respuesta de voz"
                  example: "primera opción"
                questionOptions:
                  type: array
                  items:
                    type: string
                  description: "Opciones de respuesta de la pregunta"
                  example: ["Madrid", "Barcelona", "Valencia", "Sevilla"]
                gameId:
                  type: string
                  description: "ID del juego (opcional)"
                  example: "123456"
      responses:
        '200':
          description: "Respuesta validada exitosamente"
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    description: "Si la respuesta es válida"
                    example: true
                  matchedOption:
                    type: string
                    description: "Opción que coincidió con la respuesta"
                    example: "Madrid"
                  confidence:
                    type: number
                    description: "Nivel de confianza (0.0 - 1.0)"
                    example: 0.9
                  answerIndex:
                    type: integer
                    description: "Índice de la opción seleccionada"
                    example: 0
        '400':
          description: "Error en la validación"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required fields: userId, questionId, voiceResponse"

  /api/voice-responses/process:
    post:
      tags: [VoiceResponses]
      summary: Procesar respuesta de voz
      description: |
        Procesa una respuesta de voz y la convierte al formato de juego.
        Incluye validación y registro de la interacción.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId, questionId, voiceResponse, questionOptions]
              properties:
                userId:
                  type: string
                  description: "ID del usuario"
                  example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
                questionId:
                  type: string
                  description: "ID de la pregunta"
                  example: "q123456"
                voiceResponse:
                  type: string
                  description: "Texto de la respuesta de voz"
                  example: "A"
                questionOptions:
                  type: array
                  items:
                    type: string
                  description: "Opciones de la pregunta"
                  example: ["Opción A", "Opción B", "Opción C", "Opción D"]
                gameId:
                  type: string
                  description: "ID del juego"
                  example: "123456"
      responses:
        '200':
          description: "Respuesta procesada exitosamente"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  answerIndex:
                    type: integer
                    description: "Índice de la respuesta"
                    example: 0
                  answerValue:
                    type: string
                    description: "Valor de la respuesta"
                    example: "Opción A"
                  confidence:
                    type: number
                    description: "Confianza del reconocimiento"
                    example: 0.9
        '400':
          description: "Error en el procesamiento"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "No se pudo reconocer la respuesta de voz"
                  suggestions:
                    type: array
                    items:
                      type: string
                    example: ["Diga 'A' para Opción A...", "Diga 'primera opción'"]

  /api/voice-responses/stats/{userId}:
    get:
      tags: [VoiceResponses]
      summary: Obtener estadísticas de reconocimiento de voz
      description: |
        Obtiene estadísticas detalladas del reconocimiento de voz para un usuario.
        Incluye precisión, confianza promedio y historial reciente.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: "ID del usuario"
          example: "u7d8f9g0h1i2j3k4l5m6n7o8p9"
      responses:
        '200':
          description: "Estadísticas obtenidas exitosamente"
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalAttempts:
                    type: integer
                    description: "Total de intentos de reconocimiento"
                    example: 25
                  successfulRecognitions:
                    type: integer
                    description: "Reconocimientos exitosos"
                    example: 22
                  accuracy:
                    type: number
                    description: "Precisión en porcentaje"
                    example: 88.0
                  averageConfidence:
                    type: number
                    description: "Confianza promedio"
                    example: 0.85
                  recentInteractions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "vi123456"
                        questionId:
                          type: string
                          example: "q123456"
                        voiceText:
                          type: string
                          example: "primera opción"
                        confidence:
                          type: number
                          example: 0.9
                        isValid:
                          type: boolean
                          example: true
                        timestamp:
                          type: string
                          format: date-time
                          example: "2024-10-15T10:30:00Z"
        '400':
          description: "Error en la solicitud"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "userId is required"

  # ===========================================
  # DOCUMENTACIÓN DE EVENTOS WEBSOCKET
  # ===========================================

  # Eventos de entrada (cliente -> servidor):
  # - submitVoiceAnswer: Enviar respuesta de voz
  # - toggleVoiceMode: Activar/desactivar modo de voz
  # - getVoiceModeStatus: Obtener estado del modo de voz

  # Eventos de salida (servidor -> cliente):
  # - voiceAnswerReceived: Respuesta de voz recibida
  # - voiceAnswerError: Error en respuesta de voz
  # - voiceModeChanged: Modo de voz cambiado
  # - voiceModeStatus: Estado del modo de voz