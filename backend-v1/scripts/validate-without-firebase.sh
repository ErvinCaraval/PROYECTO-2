#!/bin/bash

# Script de Validaci√≥n SIN Firebase
# Verifica que el c√≥digo est√© correcto sin necesidad de Firebase

echo "üß™ VALIDACI√ìN DE C√ìDIGO SIN FIREBASE"
echo "===================================="

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${2:-$NC}$1${NC}"
}

ERRORS=0

# Funci√≥n para ejecutar prueba
run_test() {
    local test_name="$1"
    local command="$2"
    
    log "üîç $test_name" "$BLUE"
    
    if eval "$command" > /dev/null 2>&1; then
        log "‚úÖ $test_name: PASS" "$GREEN"
        return 0
    else
        log "‚ùå $test_name: FAIL" "$RED"
        ((ERRORS++))
        return 1
    fi
}

log "üìã Ejecutando validaciones de c√≥digo..." "$YELLOW"

# 1. Pruebas unitarias (sin Firebase)
run_test "Voice Controller Tests" "npm run test:unit -- --testNamePattern='voiceController' --passWithNoTests"

# 2. Verificar sintaxis de todos los archivos
log "üîç Verificando sintaxis..." "$BLUE"
for file in controllers/*.js routes/*.js services/*.js; do
    if [ -f "$file" ]; then
        if node -c "$file" 2>/dev/null; then
            log "‚úÖ $file: OK" "$GREEN"
        else
            log "‚ùå $file: Error de sintaxis" "$RED"
            ((ERRORS++))
        fi
    fi
done

# 3. Verificar que los archivos existen
log "üìÅ Verificando archivos..." "$BLUE"
required_files=(
    "controllers/voiceController.js"
    "controllers/assemblyAIController.js"
    "routes/voiceResponses.js"
    "routes/assemblyAI.js"
    "services/assemblyAIService.js"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        log "‚úÖ $file: Existe" "$GREEN"
    else
        log "‚ùå $file: No encontrado" "$RED"
        ((ERRORS++))
    fi
done

# 4. Verificar que las rutas est√°n registradas
log "üîó Verificando rutas..." "$BLUE"
if grep -q "voice-responses" hybridServer.js && grep -q "assemblyai" hybridServer.js; then
    log "‚úÖ Rutas registradas en servidor" "$GREEN"
else
    log "‚ùå Rutas no registradas" "$RED"
    ((ERRORS++))
fi

# 5. Verificar dependencias
log "üì¶ Verificando dependencias..." "$BLUE"
if npm list axios > /dev/null 2>&1; then
    log "‚úÖ axios instalado" "$GREEN"
else
    log "‚ùå axios no instalado" "$RED"
    ((ERRORS++))
fi

# 6. Verificar que las funciones est√°n exportadas correctamente
log "üîß Verificando exports..." "$BLUE"

# Verificar voiceController exports
if grep -q "exports.validateVoiceResponse" controllers/voiceController.js && \
   grep -q "exports.processVoiceResponse" controllers/voiceController.js && \
   grep -q "exports.getVoiceRecognitionStats" controllers/voiceController.js; then
    log "‚úÖ voiceController exports correctos" "$GREEN"
else
    log "‚ùå voiceController exports faltantes" "$RED"
    ((ERRORS++))
fi

# Verificar assemblyAIController exports
if grep -q "exports.textToSpeech" controllers/assemblyAIController.js && \
   grep -q "exports.speechToText" controllers/assemblyAIController.js; then
    log "‚úÖ assemblyAIController exports correctos" "$GREEN"
else
    log "‚ùå assemblyAIController exports faltantes" "$RED"
    ((ERRORS++))
fi

# 7. Verificar que las rutas est√°n correctamente configuradas
log "üõ£Ô∏è  Verificando configuraci√≥n de rutas..." "$BLUE"
if grep -q "require.*voiceResponses" hybridServer.js && \
   grep -q "require.*assemblyAI" hybridServer.js; then
    log "‚úÖ Rutas importadas correctamente" "$GREEN"
else
    log "‚ùå Rutas no importadas" "$RED"
    ((ERRORS++))
fi

# 8. Verificar que los middlewares est√°n aplicados
log "üîí Verificando middlewares..." "$BLUE"
if grep -q "authenticate" routes/voiceResponses.js && \
   grep -q "generalUserLimiter" routes/voiceResponses.js; then
    log "‚úÖ Middlewares aplicados en voiceResponses" "$GREEN"
else
    log "‚ùå Middlewares faltantes en voiceResponses" "$RED"
    ((ERRORS++))
fi

# Resumen
echo ""
log "====================================" "$BLUE"
log "üìä RESUMEN DE VALIDACI√ìN" "$YELLOW"

if [ $ERRORS -eq 0 ]; then
    log "üéâ ¬°TODA LA VALIDACI√ìN PAS√ì!" "$GREEN"
    log "‚úÖ El c√≥digo est√° sint√°cticamente correcto" "$GREEN"
    log "‚úÖ Todas las funciones est√°n exportadas" "$GREEN"
    log "‚úÖ Las rutas est√°n configuradas correctamente" "$GREEN"
    log "‚úÖ Las dependencias est√°n instaladas" "$GREEN"
    log "‚úÖ Las pruebas unitarias pasan" "$GREEN"
    log "" "$GREEN"
    log "üöÄ EL C√ìDIGO EST√Å LISTO Y NO DEBER√çA FALLAR" "$GREEN"
    exit 0
else
    log "‚ö†Ô∏è  $ERRORS validaciones fallaron" "$RED"
    log "‚ùå Revisar los errores antes de continuar" "$RED"
    exit 1
fi